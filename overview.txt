
/Users/jude/Desktop/OpenMetric/OpenMetric/Cargo.toml:
[package]
name = "OpenMetric"
version = "0.1.0"
edition = "2021"

[dependencies]
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
actix-web = "4.0.1"
actix-files = "0.6.0"
actix-web-actors = "4.0.1"
actix = "0.13.0"  # Add this for Actor and StreamHandler traits
chrono = "0.4"
plotters = "0.3"
plotters-svg = "0.3"
env_logger = "0.9"
log = "0.4"
serde_urlencoded = "0.7"


/Users/jude/Desktop/OpenMetric/OpenMetric/overview.txt:

/Users/jude/Desktop/OpenMetric/OpenMetric/LICENSE:
MIT License

Copyright (c) 2025 jude

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

/Users/jude/Desktop/OpenMetric/OpenMetric/proj_structure.txt:
business_metrics/
│
├── Cargo.toml         # Project dependencies and metadata
├── src/
│   ├── main.rs        # Entry point, initializes the web server
│   ├── metrics/       # Metric-related logic and data processing
│   │   ├── mod.rs     # Re-exports for metrics
│   │   ├── events.rs  # Event-related structs and logic
│   │   ├── retention.rs # Retention data handling
│   │   └── calculators.rs # Functions for metric calculations (NDR, gross margin, etc.)
│   ├── charts/        # Chart generation logic
│   │   ├── mod.rs     # Re-exports for charts
│   │   └── time_series.rs # Time-series chart generation
│   ├── routes/        # Web routes for the application
│   │   ├── mod.rs     # Re-exports for routes
│   │   └── index.rs   # Dashboard ("/") route
│   ├── templates/     # Web server HTML templates (for charts and data display)
│   │   ├── index.html
│   │   └── charts/
│   │       └── chart1.png
├── data/              # Test data files
│   ├── TEST_seriesD.evnt   # Event data for series D startup
│   ├── TEST_seriesD.ret    # Retention data for series D startup
│   └── other/         # Additional test files

/Users/jude/Desktop/OpenMetric/OpenMetric/README.md:
# OpenMetric
KISS Business Metrics Dashboard for Startups 

/Users/jude/Desktop/OpenMetric/OpenMetric/src/main.rs:
mod metrics;
mod charts;
mod routes;

use actix_web::{App, HttpServer, web}; // Add `web` here
use routes::index::index;
use routes::websocket::metrics_ws;

#[actix_web::main]
async fn main() -> std::io::Result<()> {
    env_logger::init();
    println!("Starting server at http://127.0.0.1:8080/");

    HttpServer::new(|| {
        App::new()
            .service(index)
            .service(
                web::resource("/metrics_ws").route(web::get().to(metrics_ws)) // Uses `web` here
            )
            .service(actix_files::Files::new("/static", "./src/"))
    })
    .bind("127.0.0.1:8080")?
    .run()
    .await
}


/Users/jude/Desktop/OpenMetric/OpenMetric/src/metrics/events.rs:
use serde::{Deserialize, Serialize};
use std::fs::File;
use std::io::Read;

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Event {
    pub event_type: String,
    pub customer_id: Option<u32>,
    pub amount: Option<f64>,
    pub description: Option<String>,
    pub timestamp: String,
}

pub fn load_events(file_path: &str) -> Result<Vec<Event>, Box<dyn std::error::Error>> {
    let mut file = File::open(file_path)?;
    let mut data = String::new();
    file.read_to_string(&mut data)?;
    let events: Vec<Event> = serde_json::from_str(&data)?;

    println!("Loaded events: {:?}", events); // Debug log
    Ok(events)
}


/Users/jude/Desktop/OpenMetric/OpenMetric/src/metrics/mod.rs:
pub mod events;
pub mod retention;
pub mod calculators;

pub use events::load_events;
pub use retention::load_retention;
pub use calculators::{collect_monthly_metrics};


use std::fs;

pub fn get_data_files() -> Vec<(String, String)> {
    let mut evnt_files = vec![];
    let mut ret_files = vec![];

    if let Ok(entries) = fs::read_dir("data/") {
        for entry in entries.flatten() {
            let path = entry.path();
            if let Some(ext) = path.extension() {
                if ext == "evnt" {
                    evnt_files.push(path.file_stem().unwrap().to_string_lossy().to_string());
                } else if ext == "ret" {
                    ret_files.push(path.file_stem().unwrap().to_string_lossy().to_string());
                }
            }
        }
    }

    evnt_files
        .iter()
        .filter_map(|evnt| {
            ret_files
                .iter()
                .find(|ret| *ret == evnt)
                .map(|ret| (format!("data/{}.evnt", evnt), format!("data/{}.ret", ret)))
        })
        .collect()
}


/Users/jude/Desktop/OpenMetric/OpenMetric/src/metrics/calculators.rs:
// calculators.rs
use crate::metrics::events::Event;
use crate::metrics::retention::RetentionData;
use chrono::{DateTime, Utc, Datelike};
use std::collections::HashMap;

pub struct MonthlyMetrics {
    pub months: Vec<String>,
    pub revenue: Vec<f64>,
    pub burn_rate: Vec<f64>,
    pub runway: Vec<f64>,
    pub retention: Vec<f64>,
    pub net_dollar_retention: Vec<f64>,
    pub gross_margin: Vec<f64>,
}

pub fn collect_monthly_metrics(
    events: &[Event],
    retention_map: &HashMap<String, RetentionData>,
) -> MonthlyMetrics {
    let grouped_events = group_events_by_month(events);

    let mut month_keys: Vec<String> = grouped_events.keys().cloned().collect();
    month_keys.sort();

    let mut revenue = Vec::new();
    let mut burn_rate = Vec::new();
    let mut runway = Vec::new();
    let mut retention = Vec::new();
    let mut ndr = Vec::new();
    let mut gross_margin = Vec::new();

    let static_empty_vec: Vec<Event> = Vec::new();

    for m in &month_keys {
        let events = grouped_events.get(m).unwrap_or(&static_empty_vec);
        let monthly_revenue: f64 = events.iter()
            .filter(|e| e.event_type == "payment")
            .map(|e| e.amount.unwrap_or(0.0))
            .sum();
        let monthly_expenses: f64 = events.iter()
            .filter(|e| e.event_type == "expense")
            .map(|e| e.amount.unwrap_or(0.0))
            .sum();

        revenue.push(monthly_revenue);
        burn_rate.push(monthly_expenses - monthly_revenue);
        runway.push(if monthly_expenses > 0.0 {
            monthly_revenue / monthly_expenses
        } else {
            f64::INFINITY
        });

        if let Some(retention_data) = retention_map.get(m) {
            if retention_data.acquired > 0 {
                retention.push(
                    retention_data.active.iter().sum::<u32>() as f64 / retention_data.acquired as f64 * 100.0,
                );
            } else {
                retention.push(0.0);
            }
        } else {
            retention.push(0.0);
        }

        ndr.push(calculate_net_dollar_retention(events));
        gross_margin.push(calculate_gross_margin(monthly_revenue, monthly_expenses));
    }

    MonthlyMetrics {
        months: month_keys,
        revenue,
        burn_rate,
        runway,
        retention,
        net_dollar_retention: ndr,
        gross_margin,
    }
}

fn group_events_by_month(events: &[Event]) -> HashMap<String, Vec<Event>> {
    let mut grouped_events: HashMap<String, Vec<Event>> = HashMap::new();

    for event in events {
        let timestamp = DateTime::parse_from_rfc3339(&event.timestamp)
            .unwrap()
            .with_timezone(&Utc);
        let month_key = format!("{}-{:02}", timestamp.year(), timestamp.month());

        grouped_events.entry(month_key).or_default().push(event.clone());
    }

    grouped_events
}

pub fn calculate_net_dollar_retention(_events: &[Event]) -> f64 {
    100.0 // Placeholder logic
}

pub fn calculate_gross_margin(revenue: f64, expenses: f64) -> f64 {
    if revenue == 0.0 {
        0.0
    } else {
        ((revenue - expenses) / revenue) * 100.0
    }
}

pub fn format_revenue(value: f64) -> String {
    if value.abs() < 1_000.0 {
        format!("${:.0}", value)
    } else if value.abs() < 1_000_000.0 {
        format!("${:.1}k", value / 1_000.0)
    } else {
        format!("${:.2}m", value / 1_000_000.0)
    }
}

/Users/jude/Desktop/OpenMetric/OpenMetric/src/metrics/retention.rs:
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use std::fs::File;
use std::io::Read;

#[derive(Serialize, Deserialize, Debug)]
pub struct RetentionData {
    pub acquired: u32,
    pub active: Vec<u32>,
}

pub fn load_retention(file_path: &str) -> Result<HashMap<String, RetentionData>, Box<dyn std::error::Error>> {
    let mut file = File::open(file_path)?;
    let mut data = String::new();
    file.read_to_string(&mut data)?;
    let retention: HashMap<String, RetentionData> = serde_json::from_str(&data)?;

    println!("Loaded retention data: {:?}", retention); // Debug log
    Ok(retention)
}


/Users/jude/Desktop/OpenMetric/OpenMetric/src/charts/time_series.rs:
use plotters::prelude::*;
use plotters_svg::SVGBackend;

/// Formats numeric value into $/k/m format.
fn format_revenue(value: f64) -> String {
    if value.abs() < 1_000.0 {
        format!("${:.0}", value)
    } else if value.abs() < 1_000_000.0 {
        format!("${:.1}k", value / 1_000.0)
    } else {
        format!("${:.2}m", value / 1_000_000.0)
    }
}

pub fn generate_time_series_chart(
    x_labels: &[String],
    y_values: &[f64],
    chart_title: &str,
    output_path: &str,
) -> Result<(), Box<dyn std::error::Error>> {
    let root_area = SVGBackend::new(output_path, (640, 480)).into_drawing_area();
    root_area.fill(&WHITE)?;

    let max_val = y_values.iter().cloned().fold(0.0_f64, f64::max).max(10.0);
    let x_range = 0..x_labels.len();
    let y_range = 0.0..(max_val * 1.1);

    let mut chart = ChartBuilder::on(&root_area)
        .caption(chart_title, ("Arial", 22).into_font())
        .margin(20)
        .x_label_area_size(40)
        .y_label_area_size(50)
        .build_cartesian_2d(x_range, y_range)?;

    chart.configure_mesh()
        .x_labels(x_labels.len())
        .x_label_formatter(&|idx| x_labels.get(*idx).cloned().unwrap_or_default())
        .y_label_formatter(&|val| format_revenue(*val))
        .draw()?;

    chart.draw_series(LineSeries::new(
        (0..).zip(y_values.iter()).map(|(i, &val)| (i, val)),
        &BLACK,
    ))?;

    Ok(())
}

/Users/jude/Desktop/OpenMetric/OpenMetric/src/charts/mod.rs:
pub mod time_series; // Declare the time_series module

use crate::metrics::calculators::MonthlyMetrics;
use std::error::Error;
use crate::charts::time_series::generate_time_series_chart; // Import generate_time_series_chart function

pub fn generate_all_charts(metrics: &MonthlyMetrics) -> Result<(), Box<dyn Error>> {
    let chart_paths = vec![
        ("Revenue",            "src/templates/charts/chart_revenue.svg",         &metrics.revenue),
        ("Burn Rate",          "src/templates/charts/chart_burn_rate.svg",       &metrics.burn_rate),
        ("Runway (Months)",    "src/templates/charts/chart_runway.svg",          &metrics.runway),
        ("Retention (%)",      "src/templates/charts/chart_retention.svg",       &metrics.retention),
        ("Net Dollar Ret. (%)","src/templates/charts/chart_ndr.svg",             &metrics.net_dollar_retention),
        ("Gross Margin (%)",   "src/templates/charts/chart_gross_margin.svg",    &metrics.gross_margin),
    ];

    for (title, path, data) in chart_paths {
        generate_time_series_chart(&metrics.months, data, title, path)?;
    }

    Ok(())
}


/Users/jude/Desktop/OpenMetric/OpenMetric/src/templates/index.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Business Metrics Dashboard</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }
        h1 {
            text-align: center;
            margin: 20px 0;
        }
        .time-range-selector {
            text-align: center;
            margin: 20px 0;
        }
        .grid-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            padding: 20px;
        }
        .metric-box {
            border: 2px solid #000;
            border-radius: 10px;
            padding: 20px;
            background-color: #f9f9f9;
        }
        .chart-container {
            text-align: center;
        }
        .chart-container object {
            width: 100%;
            height: 300px;
            border: 1px solid #ccc;
        }
    </style>
    <script>
        const socket = new WebSocket('ws://127.0.0.1:8080/metrics_ws');

        socket.onmessage = (event) => {
            const data = JSON.parse(event.data);
            updateChartsAndTables(data);
        };

        socket.onopen = () => {
            console.log('WebSocket connection established');
        };

        socket.onerror = (error) => {
            console.error('WebSocket error:', error);
        };

        function updateTimeRange(timeRange) {
            socket.send(JSON.stringify({ type: 'update_time_range', value: timeRange }));
        }

        function updateChartsAndTables(data) {
            updateChart('revenueChart', data.revenue);
            updateChart('burnRateChart', data.burn_rate);
            updateChart('runwayChart', data.runway);
            updateChart('retentionChart', data.retention);
            updateChart('ndrChart', data.net_dollar_retention);
            updateChart('marginChart', data.gross_margin);
        }

        function updateChart(chartId, data) {
            console.log(`Updating ${chartId} with data:`, data);
            // Placeholder for actual chart update logic
        }
    </script>
</head>
<body>
    <h1>Business Metrics Dashboard</h1>

    <div class="time-range-selector">
        <label for="timeRange">Select Time Range:</label>
        <select id="timeRange" onchange="updateTimeRange(this.value)">
            <option value="3">Last 3 Months</option>
            <option value="6">Last 6 Months</option>
            <option value="12">Last 12 Months</option>
            <option value="all">All Time</option>
        </select>
    </div>

    <div class="grid-container">
        <div class="metric-box">
            <h2>Revenue</h2>
            <div class="chart-container">
                <object id="revenueChart" data="/static/templates/charts/chart_revenue.svg" type="image/svg+xml"></object>
            </div>
        </div>
        <div class="metric-box">
            <h2>Burn Rate</h2>
            <div class="chart-container">
                <object id="burnRateChart" data="/static/templates/charts/chart_burn_rate.svg" type="image/svg+xml"></object>
            </div>
        </div>
        <div class="metric-box">
            <h2>Runway (Months)</h2>
            <div class="chart-container">
                <object id="runwayChart" data="/static/templates/charts/chart_runway.svg" type="image/svg+xml"></object>
            </div>
        </div>
        <div class="metric-box">
            <h2>Retention (%)</h2>
            <div class="chart-container">
                <object id="retentionChart" data="/static/templates/charts/chart_retention.svg" type="image/svg+xml"></object>
            </div>
        </div>
        <div class="metric-box">
            <h2>Net Dollar Retention (%)</h2>
            <div class="chart-container">
                <object id="ndrChart" data="/static/templates/charts/chart_ndr.svg" type="image/svg+xml"></object>
            </div>
        </div>
        <div class="metric-box">
            <h2>Gross Margin (%)</h2>
            <div class="chart-container">
                <object id="marginChart" data="/static/templates/charts/chart_gross_margin.svg" type="image/svg+xml"></object>
            </div>
        </div>
    </div>
</body>
</html>


/Users/jude/Desktop/OpenMetric/OpenMetric/src/routes/index.rs:
// index.rs
use actix_web::{get, HttpRequest, HttpResponse, Responder};
use crate::metrics::calculators::MonthlyMetrics;
use crate::metrics::events::Event;
use crate::metrics::{get_data_files, load_events, load_retention, collect_monthly_metrics};
use crate::charts::generate_all_charts;
use std::collections::HashMap;
use chrono::{DateTime, Utc, Duration};

#[get("/")]
pub async fn index(req: HttpRequest) -> impl Responder {
    let query: HashMap<String, String> = serde_urlencoded::from_str(req.query_string()).unwrap_or_default();
    let time_window = query.get("time_window").cloned().unwrap_or_else(|| "all".to_string());
    let page: usize = query.get("page").and_then(|v| v.parse().ok()).unwrap_or(0);

    let data_files = get_data_files();
    if data_files.is_empty() {
        return HttpResponse::Ok().body("<h1>No valid .evnt and .ret file pairs found in data/ folder</h1>");
    }

    let (events_file, retention_file) = &data_files[0];
    let events = load_events(events_file).unwrap_or_else(|e| panic!("Failed to load events: {}", e));
    let retention_map = load_retention(retention_file).unwrap_or_else(|e| panic!("Failed to load retention data: {}", e));

    let filtered_events = match time_window.as_str() {
        "3" => filter_events_by_months(&events, 3),
        "6" => filter_events_by_months(&events, 6),
        "12" => filter_events_by_months(&events, 12),
        _ => events,
    };

    let monthly_metrics = collect_monthly_metrics(&filtered_events, &retention_map);
    generate_all_charts(&monthly_metrics).expect("Failed to generate charts");

    let html = build_html_response(&monthly_metrics, events_file, page);
    HttpResponse::Ok().content_type("text/html").body(html)
}

pub fn filter_events_by_months(events: &[Event], months: i64) -> Vec<Event> {
    let cutoff_date = Utc::now() - Duration::days(months * 30);
    events
        .iter()
        .filter(|e| {
            let dt = DateTime::parse_from_rfc3339(&e.timestamp).unwrap().with_timezone(&Utc);
            dt > cutoff_date
        })
        .cloned()
        .collect()
}

fn build_html_response(metrics: &MonthlyMetrics, events_file: &str, page: usize) -> String {
    let last_idx = if metrics.months.is_empty() {
        0
    } else {
        metrics.months.len() - 1
    };

    let latest_revenue = metrics.revenue.get(last_idx).unwrap_or(&0.0);
    let latest_burn = metrics.burn_rate.get(last_idx).unwrap_or(&0.0);
    let latest_runway = metrics.runway.get(last_idx).unwrap_or(&0.0);
    let latest_retention = metrics.retention.get(last_idx).unwrap_or(&0.0);
    let latest_ndr = metrics.net_dollar_retention.get(last_idx).unwrap_or(&0.0);
    let latest_margin = metrics.gross_margin.get(last_idx).unwrap_or(&0.0);

    let html_template = format!(
        "<html><head><title>Dashboard</title></head><body>\
        <h1>Metrics Dashboard</h1>\
        <p>Revenue: ${:.2}, Burn Rate: ${:.2}, Runway: {:.2} months</p>\
        <p>Retention: {:.2}%, NDR: {:.2}%, Gross Margin: {:.2}%</p>\
        <p>Page: {}</p>\
        </body></html>",
        latest_revenue, latest_burn, latest_runway, latest_retention, latest_ndr, latest_margin, page
    );

    html_template
}


/Users/jude/Desktop/OpenMetric/OpenMetric/src/routes/mod.rs:
pub mod index;
pub mod websocket;


/Users/jude/Desktop/OpenMetric/OpenMetric/src/routes/websocket.rs:
use actix::prelude::*; // Use prelude to import Actor and StreamHandler
use actix_web::{web, HttpRequest, Responder};
use actix_web_actors::ws::{self, WebsocketContext};
use serde_json::json;
use crate::metrics::{get_data_files, load_events, load_retention, collect_monthly_metrics};
use crate::routes::index::filter_events_by_months;

pub struct MetricsWebSocket;

impl Actor for MetricsWebSocket {
    type Context = WebsocketContext<Self>;
}

impl StreamHandler<Result<ws::Message, ws::ProtocolError>> for MetricsWebSocket {
    fn handle(&mut self, msg: Result<ws::Message, ws::ProtocolError>, ctx: &mut Self::Context) {
        match msg {
            Ok(ws::Message::Text(text)) => {
                let request: serde_json::Value = serde_json::from_str(&text).unwrap_or(json!({}));
                if let Some(time_range) = request.get("value").and_then(|v| v.as_u64()) {
                    let data_files = get_data_files();
                    if data_files.is_empty() {
                        ctx.text(json!({ "error": "No data files found" }).to_string());
                        return;
                    }

                    let (events_file, retention_file) = &data_files[0];
                    let events = load_events(events_file).unwrap();
                    let retention_map = load_retention(retention_file).unwrap();
                    let filtered_events = filter_events_by_months(&events, time_range as i64);
                    let metrics = collect_monthly_metrics(&filtered_events, &retention_map);

                    let response = json!({
                        "months": metrics.months,
                        "revenue": metrics.revenue,
                        "burn_rate": metrics.burn_rate,
                        "runway": metrics.runway,
                        "retention": metrics.retention,
                        "net_dollar_retention": metrics.net_dollar_retention,
                        "gross_margin": metrics.gross_margin,
                    });

                    ctx.text(response.to_string());
                } else {
                    ctx.text(json!({ "error": "Invalid time range" }).to_string());
                }
            }
            Ok(ws::Message::Ping(msg)) => ctx.pong(&msg),
            _ => (),
        }
    }
}

pub async fn metrics_ws(req: HttpRequest, stream: web::Payload) -> impl Responder {
    ws::start(MetricsWebSocket {}, &req, stream)
}

